{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","_","SearchBox","type","onChange","handleChange","placeholder","App","searchList","event","setState","search","target","value","state","fetch","then","resp","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAOaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAA4BL,EAAMI,QAAQE,MAAjCN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,YCHTC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAAiBP,QAASO,GAAfA,EAAEN,WCLRO,G,MAAY,SAACZ,GAA2B,IAAD,EAClD,OACE,uBACEC,UAAU,SACVY,KAAK,SACLC,SAAUd,EAAMe,aAChBC,YAAW,UAAEhB,EAAMgB,mBAAR,QAAuB,sBC2CzBC,E,kDAvCb,aAAe,IAAD,8BACZ,cAAM,KAgBRC,WAAa,SAACC,GACZ,EAAKC,SAAS,CACZC,OAAQF,EAAMG,OAAOC,SAhBvB,EAAKC,MAAQ,CACXH,OAAQ,GACRZ,SAAU,IALA,E,qDASd,WAAqB,IAAD,OAClBgB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACL,EAAKT,SAAS,CAAEX,SAAUoB,S,oBAUhC,WAAU,IAAD,EACsBC,KAAKN,MAA1Bf,EADD,EACCA,SAAUY,EADX,EACWA,OACZU,EAAmBtB,EAASuB,QAAO,SAACrB,GAAD,OACvCA,EAAEL,KAAK2B,cAAcC,SAASb,EAAOY,kBAGvC,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWc,aAAce,KAAKZ,WAAYF,YAAY,wBACtD,cAAC,EAAD,CAAUP,SAAUsB,W,GAlCVI,aCFHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3b0075c7.chunk.js","sourcesContent":["import { Monster } from \"../../App\";\nimport './card.styles.css';\n\nexport interface CardProps {\n  monster: Monster;\n}\n\nexport const Card = (props: CardProps) => (\n  <div className='card-container'>\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n    <h2 key={props.monster.id}>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import { Monster } from \"../../App\";\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nexport interface CardListProps {\n  monsters: Monster[];\n}\n\nexport const CardList = (props: CardListProps)  => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((_) => (\n        <Card key={_.id} monster={_} />\n      ))}\n    </div>\n  );\n};\n","import './search-box.styles.css'\n\nexport interface SearchBoxProps {\n  placeholder?: string;\n  handleChange: (event: { target: HTMLInputElement }) => void;\n}\n\nexport const SearchBox = (props: SearchBoxProps) => {\n  return (\n    <input\n      className='search'\n      type=\"search\"\n      onChange={props.handleChange}\n      placeholder={props.placeholder ?? 'Search Monsters'}\n    />\n  );\n}\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nexport interface Monster {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface AppState {\n  search: string;\n  monsters: Monster[];\n}\n\nclass App extends Component<{}, AppState> {\n  constructor() {\n    super({});\n\n    this.state = {\n      search: \"\",\n      monsters: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((resp) => resp.json())\n      .then((users) => {\n        this.setState({ monsters: users });\n      });\n  }\n\n  searchList = (event: { target: HTMLInputElement }) => {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  render() {\n    const { monsters, search } = this.state;\n    const filteredMonsters = monsters.filter((_) =>\n      _.name.toLowerCase().includes(search.toLowerCase())\n    );\n    \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox handleChange={this.searchList} placeholder=\"Search for monsters\" />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}